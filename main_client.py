import logging
import psycopg2
from psycopg2.extras import RealDictCursor
import openai
import urllib.parse

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)
from config import TELEGRAM_CLIENT_TOKEN, OPENAI_API_KEY, DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START_MENU, QUESTION, CONFIRM_REVIEW, EDIT_REVIEW_STATE = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db_connection():
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    return conn

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
def get_user(telegram_id: int):
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            query = "SELECT * FROM users WHERE telegram_id = %s LIMIT 1"
            cur.execute(query, (telegram_id,))
            return cur.fetchone()
    finally:
        conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ business_type
def get_questions(business_type: str):
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            query = "SELECT question_text FROM questions WHERE business_type = %s ORDER BY id"
            cur.execute(query, (business_type,))
            rows = cur.fetchall()
            return [row["question_text"] for row in rows]
    finally:
        conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ business_type
def get_prompt(business_type: str):
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            query = "SELECT prompt_text FROM prompts WHERE business_type = %s LIMIT 1"
            cur.execute(query, (business_type,))
            row = cur.fetchone()
            return row["prompt_text"] if row else None
    finally:
        conn.close()

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
def start(update: Update, context: CallbackContext) -> int:
    telegram_id = update.effective_user.id
    user = get_user(telegram_id)
    if not user:
        update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äì –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –±–∏–∑–Ω–µ—Å-–≥—Ä—É–ø–ø—É
    business_type = user["business_type"]
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
    questions = get_questions(business_type)
    prompt = get_prompt(business_type)

    if not questions:
        update.message.reply_text("–û—à–∏–±–∫–∞: –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END

    if not prompt:
        update.message.reply_text("–û—à–∏–±–∫–∞: –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    context.user_data["business_type"] = business_type
    context.user_data["questions"] = questions
    context.user_data["prompt"] = prompt
    context.user_data["current_question"] = 0
    context.user_data["answers"] = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∞–Ω–∫–µ—Ç—ã
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_survey")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return START_MENU

def start_menu_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    if query.data == "start_survey":
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        questions = context.user_data["questions"]
        question_text = f"üìù –í–æ–ø—Ä–æ—Å 1/4:\n{questions[0]}"
        query.edit_message_text(text=question_text)
        return QUESTION
    elif query.data == "cancel":
        query.edit_message_text(text="–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

# --- –≠—Ç–∞–ø –≤–æ–ø—Ä–æ—Å–æ–≤ ---
def answer_handler(update: Update, context: CallbackContext) -> int:
    current_q = context.user_data.get("current_question", 0)
    answer = update.message.text
    answers = context.user_data.get("answers", [])
    if len(answers) > current_q:
        answers[current_q] = answer
    else:
        answers.append(answer)
    context.user_data["answers"] = answers

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="edit_answer"),
            InlineKeyboardButton("‚è≠ –î–∞–ª–µ–µ", callback_data="next_question"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f"–û—Ç–≤–µ—Ç: \"{answer}\"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return QUESTION

def question_callback_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    current_q = context.user_data.get("current_question", 0)
    questions = context.user_data["questions"]
    if query.data == "edit_answer":
        query.edit_message_text(text=f"üìù –í–æ–ø—Ä–æ—Å {current_q+1}/4:\n{questions[current_q]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")
        return QUESTION
    elif query.data == "next_question":
        current_q += 1
        context.user_data["current_question"] = current_q
        if current_q < len(questions):
            question_text = f"üìù –í–æ–ø—Ä–æ—Å {current_q+1}/4:\n{questions[current_q]}"
            query.edit_message_text(text=question_text)
            return QUESTION
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã ‚Äì —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            answers = context.user_data["answers"]
            prompt = context.user_data["prompt"]
            dynamic_prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏:\n\n"
            for i, ans in enumerate(answers):
                dynamic_prompt += f"{i+1}. {ans}\n"
            dynamic_prompt += "\n" + prompt

            query.edit_message_text(text="–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",  # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
                    messages=[
                        {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –∫–ª–∏–Ω–∏–∫—É."},
                        {"role": "user", "content": dynamic_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=200
                )
                generated_review = response.choices[0].message.content.strip()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
                query.edit_message_text(text="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return ConversationHandler.END

            context.user_data["generated_review"] = generated_review
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
                    InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            review_text = f"üéâ –û—Ç–∑—ã–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\"{generated_review}\""
            query.edit_message_text(text=review_text, reply_markup=reply_markup)
            return CONFIRM_REVIEW
    else:
        query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.")
        return ConversationHandler.END

# --- –≠—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ ---
def review_callback_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    if query.data == "edit_review":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel_edit")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return EDIT_REVIEW_STATE
    elif query.data == "send_whatsapp":
        review = context.user_data.get("generated_review", "")
        encoded_text = urllib.parse.quote(review)
        whatsapp_url = f"https://api.whatsapp.com/send?text={encoded_text}"
        keyboard = [
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å WhatsApp", url=whatsapp_url)],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_from_whatsapp"),
                InlineKeyboardButton("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ WhatsApp –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
        return CONFIRM_REVIEW
    elif query.data == "back_from_whatsapp":
        generated_review = context.user_data.get("generated_review", "")
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text=f"üéâ –û—Ç–∑—ã–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\"{generated_review}\"", reply_markup=reply_markup)
        return CONFIRM_REVIEW
    elif query.data == "restart":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        context.user_data.clear()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_survey")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return START_MENU
    else:
        query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.")
        return ConversationHandler.END

def edit_review_handler(update: Update, context: CallbackContext) -> int:
    edited_review = update.message.text
    context.user_data["generated_review"] = edited_review
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f"–í–∞—à –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤:\n\"{edited_review}\"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return CONFIRM_REVIEW

def cancel_edit_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    generated_review = context.user_data.get("generated_review", "")
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\"{generated_review}\"", reply_markup=reply_markup)
    return CONFIRM_REVIEW

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def main():
    updater = Updater(TELEGRAM_CLIENT_TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_MENU: [CallbackQueryHandler(start_menu_handler, pattern="^(start_survey|cancel)$")],
            QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, answer_handler),
                CallbackQueryHandler(question_callback_handler, pattern="^(edit_answer|next_question)$"),
            ],
            CONFIRM_REVIEW: [
                CallbackQueryHandler(review_callback_handler, pattern="^(edit_review|send_whatsapp|back_from_whatsapp|restart)$"),
                MessageHandler(Filters.text & ~Filters.command, edit_review_handler),
            ],
            EDIT_REVIEW_STATE: [
                CallbackQueryHandler(cancel_edit_handler, pattern="^cancel_edit$"),
                MessageHandler(Filters.text & ~Filters.command, edit_review_handler),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
